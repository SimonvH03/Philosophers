jun 10
Philospher
	state: think, eat, sleep
	number: 1 - n
Fork
	state: on table, in use
	number: 1 - n
Table (Bonus)
	forkcount: forks available

(#forks == #philosophers == #tablespots)

...think -> eat -> sleep ->...

Output
	timestamp_in_ms N has taken a fork
	timestamp_in_ms N is eating
	timestamp_in_ms N is sleeping
	timestamp_in_ms N is thinking
	timestamp_in_ms N died

Philosophers avoid dying?

Philosophers should 'be' a thread

Protect the Forks with a mutex each (to avoid philosophers duplicating them)

Avoid data races (only read after write from different thread)


jun 11
Philos need to pick up their forks one at a time, preferably left to right

pick up a fork by locking it's mutex (forks are essentialy justa  mutex pointer)

at least one thread should monitor the simulation, a waiter or superisor
	it should keep track of philo deaths and (optional) mealcount completions
this task can be divided over two threads, as to not waste system recources on the optional function
	note that if multiple supervisors exist, the philosophers need to be locked with a mutex each, this might not be necessary otherwise

all threads should be joined, this will ensure all threads are terminated before continuing the program
